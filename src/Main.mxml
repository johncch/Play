<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   width="500" height="400"
					   creationComplete="init();"
					   showStatusBar="false"
					   close="shutdown();"
					   invoke="onInvoke(event);"
					   >
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:layout>
		<s:VerticalLayout gap="0" />
	</s:layout>
	
	<fx:Style source="style.css" />
	
	<fx:Script>
		<![CDATA[
		import adobe.utils.ProductManager;
		import com.greensock.plugins.BlurFilterPlugin;
		import com.greensock.plugins.GlowFilterPlugin;
		import flash.desktop.NativeApplication;
		import flash.display.NativeWindow;
		import flash.display.Screen;
		import flash.display.StageDisplayState;
		import flash.events.Event;
		import flash.events.InvokeEvent;
		import flash.events.KeyboardEvent;
		import flash.filesystem.File;
		import flash.filesystem.FileMode;
		import flash.filesystem.FileStream;
		import mx.collections.ArrayCollection;
		import mx.events.ItemClickEvent;
		import mx.events.MenuEvent;
		import nl.flexperiments.display.AirAlert;
		import org.fifthrevision.Director;
		import org.fifthrevision.Presentation;
		import com.greensock.plugins.TweenPlugin;
		
		[Bindable] private var director:Director = new Director();
		[Bindable] private var screensData:ArrayCollection = new ArrayCollection();
		
		private function init():void {			
			TweenPlugin.activate([BlurFilterPlugin]);
			
			var screens:Array = Screen.screens;
			for (var i:int = 0; i < screens.length; i++) {			
				screensData.addItem({
					label: "Screen " + (i + 1),
					left: screens[i].bounds.left,
					screen: screens[i]
				});
			}
			
			screenCombo.selectedIndex = 0;
			if (screensData.length == 1) {
				screenCombo.enabled = false;
			}
		}
		
		private function onInvoke(e:InvokeEvent):void {
			trace(e.arguments.toString());
		}
		
		private var file:File;
		private var dir:String;
		
		private function browse(e:MenuEvent):void {
			if (e.item.@value == "load") {
				file = new File();
				file.addEventListener(Event.SELECT, readXMLFile);
				file.browseForOpen("Select the configuration file");				
			} else if (e.item.@value == "save") {	
				this.writeXMLFile();
			} else if (e.item.@value == "exit") {
				this.shutdown();
			}
		}
		
		private function readXMLFile(e:Event):void {
			var filestream:FileStream = new FileStream();
			filestream.open(file, FileMode.READ);
			var xml:XML = XML(filestream.readUTFBytes(filestream.bytesAvailable));
			filestream.close();
			
			this.dir = file.url.substr(0, file.url.length - file.name.length);
			director.setFilePath(dir);
			director.load(xml);			
		}
		
		private function writeXMLFile():void {
			if (file == null) {
				AirAlert.show("There is no file to write to");
				return;
			}
				
			var outputString:String = '<?xml version="1.0" encoding="utf-8" ?>\n';
			var xmllist:XMLList = director.actionsList.source;
			var presentation:XML = <presentation />;			
			for (var i:int = 1, il:int = xmllist.length(); i < il - 1; i++) {
				presentation.appendChild(xmllist[i]);				
			}
			outputString += presentation.toXMLString();			
			outputString = outputString.replace(/\n/g, File.lineEnding);
			
			var filestream:FileStream= new FileStream();
			filestream.open(file, FileMode.WRITE);
			filestream.writeUTFBytes(outputString);
			filestream.close();
		}
		
		private function fullscreen():void {
			var screen:Object = screenCombo.selectedItem;			
			director.fullscreen(screen.screen);
		}
		
		private function shutdown():void {
			for (var i:int= NativeApplication.nativeApplication.openedWindows.length - 1; i >= 0; i--) {
				NativeWindow(NativeApplication.nativeApplication.openedWindows[i]).close();
			}
		}
		
		]]>
	</fx:Script>
	
	<mx:MenuBar labelField="@label" itemClick="browse(event)" width="100%">
			<fx:XMLList>
				<menuitem label="File">
					<menuitem label="Load.." value="load" />
					<menuitem label="Save" value="save" />
					<menuitem label="Exit" value="exit" />
				</menuitem>
			</fx:XMLList>
	</mx:MenuBar>
		
	<s:Group width="100%" height="100%">
		<s:layout>
			<s:HorizontalLayout paddingTop="5" paddingBottom="5" paddingLeft="5" paddingRight="5" />
		</s:layout>
		
		<s:List id="actionsList" width="80%" height="100%" 
			dataProvider="{director.actionsList}" selectedIndex="@{director.actionsIndex}"
			labelFunction="{director.labelFunction}"
		/>
		
		<s:Group width="20%">
			<s:layout>
				<s:VerticalLayout />
			</s:layout>
			<s:Button width="100%" label="Next" click="director.next();" enabled="{director.editing || director.presenting}" />
			<s:Button width="100%" label="Previous" click="director.previous();" enabled="{director.editing || director.presenting}"/>
		</s:Group>
	</s:Group>
	
	<s:Group width="100%">
		<s:layout>
			<s:HorizontalLayout paddingTop="5" paddingBottom="5" paddingLeft="5" paddingRight="5" />				
		</s:layout>
		<mx:Spacer width="100%" />
		<s:Button id="editorBtn" label="Edit" click="director.edit();" enabled="{director.editable}" />
		<s:ComboBox id="screenCombo" dataProvider="{screensData}"/>
		<s:Button id="showBtn" label="Show" click="director.show();" enabled="{director.showable}" />
		<s:Button id="fsBtn" label="Fullscreen" click="fullscreen();" enabled="{director.fullscreenable}" />
	</s:Group>
	
</s:WindowedApplication>